// <auto-generated />
using Dy.Data;
using Dy.Data.Domain;
using Dy.Data.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Dy.Data.Migrations
{
    [DbContext(typeof(DyDbContext))]
    partial class DyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dy.Data.Domain.SysDept", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DeptCode");

                    b.Property<int?>("DeptLevel");

                    b.Property<string>("DeptName");

                    b.Property<string>("DeptType");

                    b.Property<string>("ParentId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int?>("SortId");

                    b.Property<string>("Tel");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("Depts");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysDictionary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DicKey");

                    b.Property<int?>("DicLevel");

                    b.Property<string>("DicType");

                    b.Property<string>("DicValue");

                    b.Property<string>("DisName");

                    b.Property<bool?>("IsEnabed");

                    b.Property<bool?>("IsEnabled");

                    b.Property<string>("ParentId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("DeptId");

                    b.Property<string>("DeptName");

                    b.Property<string>("EmpName");

                    b.Property<string>("LogContent");

                    b.Property<string>("LogIP");

                    b.Property<string>("LogType");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("FieldName");

                    b.Property<int>("LogId");

                    b.Property<string>("NewValue");

                    b.Property<string>("OperateType");

                    b.Property<string>("OriginalVal");

                    b.Property<int?>("SysLogId");

                    b.Property<string>("TableName");

                    b.HasKey("Id");

                    b.HasIndex("SysLogId");

                    b.ToTable("LogDetails");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysMenu", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("Icon");

                    b.Property<string>("MenuName");

                    b.Property<bool?>("MenuState");

                    b.Property<int?>("MenuType");

                    b.Property<string>("ParentId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysOperate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<string>("OptionName");

                    b.Property<int?>("SortId");

                    b.Property<string>("Style");

                    b.HasKey("Id");

                    b.ToTable("Operates");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRight", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BizScope");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("ManagerScope");

                    b.Property<string>("MobileRight");

                    b.Property<string>("ModuleRight");

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<bool?>("IsSystem");

                    b.Property<string>("MobileRight");

                    b.Property<string>("ModuleRight");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<byte[]>("RowVersion");

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.Property<string>("SysRoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SysRoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("Discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmpBirth");

                    b.Property<string>("EmpName");

                    b.Property<string>("EmpNo");

                    b.Property<string>("EmpPinyin");

                    b.Property<string>("EmpSex");

                    b.Property<bool?>("IsSupper");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("SortId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("SysUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SysUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserDept", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DeptId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("IsMajor");

                    b.Property<bool?>("JobState");

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("SysDeptId");

                    b.Property<string>("SysUserId");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SysDeptId");

                    b.HasIndex("SysUserId");

                    b.ToTable("UserDepts");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("Id");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("SysUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("SysUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("Id");

                    b.Property<bool?>("IsMajor");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("SysRoleId");

                    b.Property<string>("SysUserId");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SysRoleId");

                    b.HasIndex("SysUserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("SysUserId");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("SysUserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLogDetail", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysLog")
                        .WithMany("LogDetails")
                        .HasForeignKey("SysLogId");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRoleClaim", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dy.Data.Domain.SysRole")
                        .WithMany("RoleClaims")
                        .HasForeignKey("SysRoleId");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserClaim", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany("UserClaims")
                        .HasForeignKey("SysUserId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserDept", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysDept")
                        .WithMany("Users")
                        .HasForeignKey("SysDeptId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany("UserDepts")
                        .HasForeignKey("SysUserId");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserLogin", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany("UserLogins")
                        .HasForeignKey("SysUserId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserRole", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dy.Data.Domain.SysRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("SysRoleId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("SysUserId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserToken", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany("UserTokens")
                        .HasForeignKey("SysUserId");

                    b.HasOne("Dy.Data.Domain.SysUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
