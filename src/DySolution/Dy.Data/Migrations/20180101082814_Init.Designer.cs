// <auto-generated />
using Dy.Data;
using Dy.Data.Domain;
using Dy.Data.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Dy.Data.Migrations
{
    [DbContext(typeof(DyDbContext))]
    [Migration("20180101082814_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dy.Data.Domain.SysDept", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(50);

                    b.Property<int?>("DeptLevel");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DeptType")
                        .HasMaxLength(50);

                    b.Property<string>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SortId");

                    b.Property<string>("Tel")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("Depts");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysDictionary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DicKey")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("DicLevel");

                    b.Property<string>("DicType")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("DicValue")
                        .HasMaxLength(200);

                    b.Property<string>("DisName")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsEnabed");

                    b.Property<bool?>("IsEnabled");

                    b.Property<string>("ParentId")
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.HasAlternateKey("DicType", "DicKey");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("DeptId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("DeptName")
                        .HasMaxLength(50);

                    b.Property<string>("EmpName")
                        .HasMaxLength(50);

                    b.Property<string>("LogContent")
                        .HasMaxLength(4000);

                    b.Property<string>("LogIP")
                        .HasMaxLength(50);

                    b.Property<string>("LogType")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50);

                    b.Property<int>("LogId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(4000);

                    b.Property<string>("OperateType")
                        .HasMaxLength(50);

                    b.Property<string>("OriginalVal")
                        .HasMaxLength(4000);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(56);

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("LogDetails");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysMenu", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("MenuState")
                        .IsRequired();

                    b.Property<int?>("MenuType")
                        .IsRequired();

                    b.Property<string>("ParentId")
                        .HasMaxLength(36);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("MenuCode");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysOperate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<string>("OptionCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("SortId");

                    b.Property<string>("Style")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasAlternateKey("OptionCode");


                    b.HasAlternateKey("OptionName");

                    b.ToTable("Operates");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRight", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("BizScope");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<string>("ManagerScope");

                    b.Property<string>("MobileRight");

                    b.Property<string>("ModuleRight");

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.ToTable("UserRights");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<bool?>("IsSystem");

                    b.Property<string>("MobileRight");

                    b.Property<string>("ModuleRight");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SortId");

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("SysRole");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(1000);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1000);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SysRoleClaim");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<int?>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Creator")
                        .HasMaxLength(200);

                    b.Property<int?>("DeleteState");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<bool?>("EmailConfirmed");

                    b.Property<string>("EmpBirth")
                        .HasMaxLength(10);

                    b.Property<string>("EmpName")
                        .HasMaxLength(50);

                    b.Property<string>("EmpNo")
                        .HasMaxLength(100);

                    b.Property<string>("EmpPinyin")
                        .HasMaxLength(50);

                    b.Property<string>("EmpSex")
                        .HasMaxLength(2);

                    b.Property<bool?>("IsSupper");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<bool?>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<bool?>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36);

                    b.Property<int?>("SortId");

                    b.Property<bool?>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.ToTable("SysUser");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(1000);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1000);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SysUserClaim");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserDept", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("DeleteState");

                    b.Property<string>("DeptId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("IsMajor");

                    b.Property<bool?>("JobState");

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepts");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SysUserLogin");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("DeleteState");

                    b.Property<bool?>("IsMajor");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SysUserRole");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SysUserToken");
                });

            modelBuilder.Entity("Dy.Data.Domain.SysLogDetail", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysLog")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysRoleClaim", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserClaim", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserDept", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysDept", "Dept")
                        .WithMany("Users")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dy.Data.Domain.SysUser", "User")
                        .WithMany("UserDepts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserLogin", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserRole", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dy.Data.Domain.SysUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dy.Data.Domain.SysUserToken", b =>
                {
                    b.HasOne("Dy.Data.Domain.SysUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
